CLI for now? Frontend maybe later.

What format is SICK in? Can you get a json? Tabletop Simulator? You will need to use that format.

1st step is about modeling the data shape?

Consideration for superlatives and a "big" change in board state (need to define big and knowledge of board state)

The art of describing Ravages could be its own thing. Most changes to game state happen then. (Dahan fighting back too.)

Piece of data needed for a turn:
I. Card/Spirit Board
II. Presence
III. Board pieces (Letter and numbers) (Land types? Could talk about growth options)
IV. Fear
V. Blight
VI. Invader Deck
VII. Other Tokens (Beast/Wilds/Disease/Etc.)


Assume Json file for now, worry about details later

Parse vs. Validate
Validation is asking a question of something you already have, and rejecting if its not in the right shape
Parsing is the act of insuring creation of correct data shapes

Starting out: Get a card, put out a saga description.
Anatomy of a Spirit Card:
Name
Speed
Range
Target
Energy Cost
Elements Granted
Card type (Minor/Major/Innate)
Effect
    (Parsers?)
(Thresholds/Choices)
(Unique to Spirit vs. general pool)

* Given a json files that contains cards, can select a card and have it produce a saga output

* Output includes the Name
* Output includes the Speed
* Output includes the Range
* Output includes the Target
* Output includes the Energy Cost
* Output includes the Elements Granted
* Output includes the Effect

The anatomy of a power use into saga, bare bones

Spirit, Invader, Power Being Used, Land, Results?

Spirit{ name: name}
Invader{ name: name}
Power{ done already}
Land{ type: type}

I will want string concatenation and multiple scripts

So the data will go into a power concatenator that refers to multiple scripts, probably at random, and then back to the concatenator and then back out.

The data needs to be turned into saga. Every power will have to a saga translator? Or a generic saga translator.

A simple script could be

“#{spirit} does #{effect}, against #{invaders} at #{land}”

Eventually I will need a “significance” metric.

What makes a good saga? What makes a good summary?

Playing around with unit size. Will the saga have smaller components of pargraphs/sentences?

Testing randomness:
    Don't use the rand method for cryptographic functions. It gets seeds and if seeds are re-used they get the same thing back.

    pre-seed is an option, look to the "srand" method

Use inheritence when the children have the exact public methods repeated. Exact being key word here, reconsider if there are a couple public methods not shared.

Look up the difference between classes and modules again. The finer points, specifically. Extends says I want these to be class methods, Includes is for instance methods. Remember, you can only inherit from one thing at a time.

Using Unexpected Tigers as an example with Grinning Trickster, I'd imagine something like this:

With its presence in the western wetlands [land], Grinning Trickster Stirs Up Trouble [spirit name] effortlessly [0 energy] called forth Unexpected Tigers [card name] upon the neighboring [1 range] mountains, gathering the power of the moon, of fire, and of animals [elements] and invoking anxiety [1 fear] within the explorers [land contents] there. From the neighboring jungle, the beasts roamed in, driving a few explorers out back to the nearby wetlands. 

when to case and when to if: 
Use Case if the thing you are pushing on is the same shape/type

Use If if the condition can vary arbitrarily 

Move if then statements out of work level and into creation
Read up on Polymorphism 

8/26/24

So instead of getting ahead of ourselves on the spreadsheets about Card effects, we instead focused on just elements. Good lesson what could be called Polymorphism. About moving checking data types out of logics and into class creation. If then statements really need to be re-evaluated. The fact that Card Elements are a closed set (sun, moon, fire, water, air, earth, plant, animals) helps with assumptions. Also don’t take it for granted what it takes to get simple strings presentable to an audience. Have more care in this.

Right now, I need to get past copying patterns and understanding adroitly shaped classes

9/4/24

Okay I think I'm just going to make a naively formed card effect first and then worry about non-standard effects later. Also, what do I even want the prose for player-to-player support to look like? How should 'Drawing more minor powers' or 'Repeat lowest cost card' look like in prose?

9/15/24
Look up Null Object pattern

regarding effect.to_s

move effect data to initialize, need to save state. So you aren't constantly calling methods just to check if things exist. avoid a service class.

blah.methods.sort - Object.methods

next steps: extract multiple sets of tokens/matches from effect string

9/29/24

In tokens class, note new short hand

    def self.prose(tokens)
      tokens.map(&:phrase)
    end

The block (&:phrase) is looking first arg and calling method phrase. & is the "to_proc" operator.

token will need land information. List of movement type, amount, lands involved. Lands involved can vary. SHould I be looking for movement instead.

Gather and push should both be arrays of token information, it's just more obvious with gather.

I briefly entertained if I would start using an board-state change approach that would be power/card agnostic. (“I don’t care what ability was used. Just give me more what changed, what pieces moved, what player resources changed.”) This would be opposed to referencing what is in the text of an ability and the further information required (“Okay, tell me ability used, but you need to give me targets, be they land or other players.”) In the end, because this is based off of taste, I’m going with the latter because it gives me more chance to be expressive.

10/2/24

So I think I need a catch all, "Round Information" packet of some sort.

10/6/24

Consider a game state class to save the state. Pragmatically we want something to initialize the board to begin with. 

This all started because I now need round information and that implies a game state so that tracks. Round information probably will just align with the change in game state.

10/13/24

So I will want location for spirits a lot of times for decription, so I'm wondering when and how this will eventually turn into just generic "round information". I'm just going to let it develop organically.

Also, I want to implement a larger selection of sentence structures. Have to remind myself how to test for randomness and in randomness. 

Wait, crap, can an action have more than one Presence involved? Do I need locations plural, or a single location. 

10/20/24

Okay, pulling back on locations, will need to track the location of presence elsewhere. Right now it seems like a general game_state class seems like the better option. Right now I've just hard coded the value of presence location into the class under Parser and that isn't right.

The token class itself might need to be expand (or possibly renamed into movement.)

Let's think, what do we want on out of game_state at minimum. Currently, I want to a running log of where tokens are located. This should include creation and destruction as well as movement, because creation and destruction is potentially very cool and evocative prose to write that can be customized per spirit:

 "Starlights new presence blossomed from many interesecting lines of potentiality"

 "Smug, faint cackling could be heard from the jungle as Grinning Trickster established a new presence in the jungle."

 "Slow, coiling, primal magic wrapped itself into a new point of presence at Serpent's behest"

Anyway, game_state should also keep track of token type. Location and type at the very least means it needs access to the board and lands

From Ben: game_state should probably be a singleton, should read up on that.

Starting off I'm just confining myself to just presence. game_state definitely will need to concern itself with the other tokens. All the tokens, in fact. But let's get this working first.

You don't need an initialize with singletons,, nor should you have to ever spin one up with a .new. You should just have access to it.

Look to the self.save method and the GameState.save examples to just get more used to this slightly different syntax. 

GameState sounds like it should be a big hash that holds all the lands and the lands have a space for the temp tokens that are currently held there.

Current to_do:
get game_state class useful

